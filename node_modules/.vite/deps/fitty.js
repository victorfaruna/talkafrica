// node_modules/fitty/dist/fitty.module.js
var e = (function(e2) {
  if (e2) {
    var t = function(e3) {
      return [].slice.call(e3);
    }, n = 0, i = 1, r = 2, o = 3, a = [], l = null, u = "requestAnimationFrame" in e2 ? function() {
      var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { sync: false };
      e2.cancelAnimationFrame(l);
      var n2 = function() {
        return s(a.filter((function(e3) {
          return e3.dirty && e3.active;
        })));
      };
      if (t2.sync) return n2();
      l = e2.requestAnimationFrame(n2);
    } : function() {
    }, c = function(e3) {
      return function(t2) {
        a.forEach((function(t3) {
          return t3.dirty = e3;
        })), u(t2);
      };
    }, s = function(e3) {
      e3.filter((function(e4) {
        return !e4.styleComputed;
      })).forEach((function(e4) {
        e4.styleComputed = m(e4);
      })), e3.filter(y).forEach(v);
      var t2 = e3.filter(p);
      t2.forEach(d), t2.forEach((function(e4) {
        v(e4), f(e4);
      })), t2.forEach(S);
    }, f = function(e3) {
      return e3.dirty = n;
    }, d = function(e3) {
      e3.availableWidth = e3.element.parentNode.clientWidth, e3.currentWidth = e3.element.scrollWidth, e3.previousFontSize = e3.currentFontSize, e3.currentFontSize = Math.min(Math.max(e3.minSize, e3.availableWidth / e3.currentWidth * e3.previousFontSize), e3.maxSize), e3.whiteSpace = e3.multiLine && e3.currentFontSize === e3.minSize ? "normal" : "nowrap";
    }, p = function(e3) {
      return e3.dirty !== r || e3.dirty === r && e3.element.parentNode.clientWidth !== e3.availableWidth;
    }, m = function(t2) {
      var n2 = e2.getComputedStyle(t2.element, null);
      return t2.currentFontSize = parseFloat(n2.getPropertyValue("font-size")), t2.display = n2.getPropertyValue("display"), t2.whiteSpace = n2.getPropertyValue("white-space"), true;
    }, y = function(e3) {
      var t2 = false;
      return !e3.preStyleTestCompleted && (/inline-/.test(e3.display) || (t2 = true, e3.display = "inline-block"), "nowrap" !== e3.whiteSpace && (t2 = true, e3.whiteSpace = "nowrap"), e3.preStyleTestCompleted = true, t2);
    }, v = function(e3) {
      e3.element.style.whiteSpace = e3.whiteSpace, e3.element.style.display = e3.display, e3.element.style.fontSize = e3.currentFontSize + "px";
    }, S = function(e3) {
      e3.element.dispatchEvent(new CustomEvent("fit", { detail: { oldValue: e3.previousFontSize, newValue: e3.currentFontSize, scaleFactor: e3.currentFontSize / e3.previousFontSize } }));
    }, h = function(e3, t2) {
      return function(n2) {
        e3.dirty = t2, e3.active && u(n2);
      };
    }, w = function(e3) {
      return function() {
        a = a.filter((function(t2) {
          return t2.element !== e3.element;
        })), e3.observeMutations && e3.observer.disconnect(), e3.element.style.whiteSpace = e3.originalStyle.whiteSpace, e3.element.style.display = e3.originalStyle.display, e3.element.style.fontSize = e3.originalStyle.fontSize;
      };
    }, b = function(e3) {
      return function() {
        e3.active || (e3.active = true, u());
      };
    }, z = function(e3) {
      return function() {
        return e3.active = false;
      };
    }, F = function(e3) {
      e3.observeMutations && (e3.observer = new MutationObserver(h(e3, i)), e3.observer.observe(e3.element, e3.observeMutations));
    }, g = { minSize: 16, maxSize: 512, multiLine: true, observeMutations: "MutationObserver" in e2 && { subtree: true, childList: true, characterData: true } }, W = null, E = function() {
      e2.clearTimeout(W), W = e2.setTimeout(c(r), x.observeWindowDelay);
    }, M = ["resize", "orientationchange"];
    return Object.defineProperty(x, "observeWindow", { set: function(t2) {
      var n2 = "".concat(t2 ? "add" : "remove", "EventListener");
      M.forEach((function(t3) {
        e2[n2](t3, E);
      }));
    } }), x.observeWindow = true, x.observeWindowDelay = 100, x.fitAll = c(o), x;
  }
  function C(e3, t2) {
    var n2 = Object.assign({}, g, t2), i2 = e3.map((function(e4) {
      var t3 = Object.assign({}, n2, { element: e4, active: true });
      return (function(e5) {
        e5.originalStyle = { whiteSpace: e5.element.style.whiteSpace, display: e5.element.style.display, fontSize: e5.element.style.fontSize }, F(e5), e5.newbie = true, e5.dirty = true, a.push(e5);
      })(t3), { element: e4, fit: h(t3, o), unfreeze: b(t3), freeze: z(t3), unsubscribe: w(t3) };
    }));
    return u(), i2;
  }
  function x(e3) {
    var n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return "string" == typeof e3 ? C(t(document.querySelectorAll(e3)), n2) : C([e3], n2)[0];
  }
})("undefined" == typeof window ? null : window);
var fitty_module_default = e;
export {
  fitty_module_default as default
};
//# sourceMappingURL=fitty.js.map
